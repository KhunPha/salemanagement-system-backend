// let name = filename
                    // const ext = name.split(".")[1]
                    // name = `${Math.floor((Math.random() * 10000) + 1000)}`
                    // newfilename = `${name}-${Date.now()}.${ext}`;

                    // const localtion = `./public/user/${newfilename}`
                    // const stream = createReadStream()

                    // await stream.pipe(fs.createWriteStream(localtion))

// if (args.image) {


        //   // const chunks: Buffer[] = [];
        //   // const readStream = createReadStream();

        //   // readStream.on('data', (chunk: Buffer) => chunks.push(chunk));
        //   // readStream.on('end', async () => {
        //   //   const buffer = Buffer.concat(chunks);

        //   //   try {
        //   //     // Process the image with sharp
        //   //     // const imageBuffer = await sharp(buffer)
        //   //     //   .resize({ width: 128 })
        //   //     //   .jpeg({ quality: 100 }) // Compress JPEG image
        //   //     //   .toBuffer()

        //   //     // newfilename = `data:image/jpeg;base64,${imageBuffer.toString('base64')}`;

        //   //     await sharp(buffer)
        //   //       .resize({ width: 512 })
        //   //       .jpeg({ quality: 90 })
        //   //       .toFile(`./public/product/${newfilename}`)
        //   //   } catch (error) {
        //   //     console.error('Error processing image:', error);
        //   //     throw new Error('Error processing image');
        //   //   }
        //   // });

        //   args.input.image = `${result.url}`

        // } else {
        //   args.input.image = img
        // }

// Backup
mongodump --uri="mongodb+srv://khunpha:Sopha3305@salemanagement.qbm94iq.mongodb.net/salemanagement?retryW
rites=true&w=majority&appName=salemanagement" --out=D:\Backup

// Restore
mongorestore --uri="mongodb://localhost:27017/salemanagement" --drop D:\Backup\salemanagement 

const productSum: any = {};

                // data.map((data: any) => {
                //     data.products_lists.map((product: any) => {
                //         console.log(product)
                //         const productId = product.product_details._id.toString();
                //         if (!productSum[productId]) {
                //             productSum[productId] = { pro_name: product?.product_details?.pro_name, qty: 0, price: 0 }
                //         }
                //         productSum[productId].qty += product.qty
                //     })
                // })

                // const summaries = Object.keys(productSum).map(productId => ({
                //     pro_name: productSum[productId].pro_name,
                //     qty: productSum[productId].qty,
                //     price: productSum[productId].price
                // }))

                // console.log(summaries)